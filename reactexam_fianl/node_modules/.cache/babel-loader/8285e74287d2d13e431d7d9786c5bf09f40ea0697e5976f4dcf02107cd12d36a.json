{"ast":null,"code":"var _jsxFileName = \"/Users/visualcamp/Documents/reactexam_fianl/src/components/ReviewList.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된순\"\n}];\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 35\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n};\n_c = ControlMenu;\nconst ReviewList = _ref2 => {\n  _s();\n  let {\n    reviewList\n  } = _ref2;\n  const [sortType, setSortType] = useState('lastest');\n  const getProcessedReviewList = () => {\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(reviewList));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), reviewList.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ReviewList, \"J6k4vmWOtbUA5sXyMLeWoPszh4M=\");\n_c2 = ReviewList;\nReviewList.defaultProps = {\n  reviewList: []\n};\nexport default ReviewList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"ReviewList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","sortOptionList","value","name","ControlMenu","_ref","onChange","optionList","e","target","children","map","it","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","ReviewList","_ref2","_s","reviewList","sortType","setSortType","getProcessedReviewList","compare","a","b","parseInt","date","copyList","JSON","parse","stringify","content","id","_c2","defaultProps","$RefreshReg$"],"sources":["/Users/visualcamp/Documents/reactexam_fianl/src/components/ReviewList.js"],"sourcesContent":["import {useState} from \"react\";\n\nconst sortOptionList = [\n    {value: \"latest\", name:\"최신순\"},\n    {value: \"oldest\", name:\"오래된순\"},\n]\n\nconst ControlMenu = ({value, onChange, optionList}) => {\n    return <select value={value} onChange={(e) => onChange(e.target.value)}>\n        {optionList.map((it,idx)=><option key={idx} value={it.value}>{it.name}</option>)}\n    </select>\n}\n\nconst ReviewList = ({reviewList}) => {\n\n    const [sortType, setSortType] = useState('lastest');\n    const getProcessedReviewList = () =>{\n        const compare = (a,b) => {\n            if (sortType === \"latest\") {\n                return parseInt(b.date) - parseInt(a.date);\n            \n            } else {\n                return parseInt(a.date) - parseInt(b.date);\n            }\n        };\n        const copyList = JSON.parse(JSON.stringify(reviewList));\n        \n\n    }\n    return (\n        <div>\n            <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList}/>\n            {reviewList.map((it) => (\n                <div key={it.id}>{it.content}</div>\n            )\n            \n            )}\n        </div>\n    );\n};\n\nReviewList.defaultProps = {\n    reviewList : [],\n};  \n\nexport default ReviewList;"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAG,CACnB;EAACC,KAAK,EAAE,QAAQ;EAAEC,IAAI,EAAC;AAAK,CAAC,EAC7B;EAACD,KAAK,EAAE,QAAQ;EAAEC,IAAI,EAAC;AAAM,CAAC,CACjC;AAED,MAAMC,WAAW,GAAGC,IAAA,IAAmC;EAAA,IAAlC;IAACH,KAAK;IAAEI,QAAQ;IAAEC;EAAU,CAAC,GAAAF,IAAA;EAC9C,oBAAOL,OAAA;IAAQE,KAAK,EAAEA,KAAM;IAACI,QAAQ,EAAGE,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACP,KAAK,CAAE;IAAAQ,QAAA,EAClEH,UAAU,CAACI,GAAG,CAAC,CAACC,EAAE,EAACC,GAAG,kBAAGb,OAAA;MAAkBE,KAAK,EAAEU,EAAE,CAACV,KAAM;MAAAQ,QAAA,EAAEE,EAAE,CAACT;IAAI,GAA9BU,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAoC,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AACb,CAAC;AAAAC,EAAA,GAJKd,WAAW;AAMjB,MAAMe,UAAU,GAAGC,KAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAACC;EAAU,CAAC,GAAAF,KAAA;EAE5B,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM2B,sBAAsB,GAAGA,CAAA,KAAK;IAChC,MAAMC,OAAO,GAAGA,CAACC,CAAC,EAACC,CAAC,KAAK;MACrB,IAAIL,QAAQ,KAAK,QAAQ,EAAE;QACvB,OAAOM,QAAQ,CAACD,CAAC,CAACE,IAAI,CAAC,GAAGD,QAAQ,CAACF,CAAC,CAACG,IAAI,CAAC;MAE9C,CAAC,MAAM;QACH,OAAOD,QAAQ,CAACF,CAAC,CAACG,IAAI,CAAC,GAAGD,QAAQ,CAACD,CAAC,CAACE,IAAI,CAAC;MAC9C;IACJ,CAAC;IACD,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACZ,UAAU,CAAC,CAAC;EAG3D,CAAC;EACD,oBACItB,OAAA;IAAAU,QAAA,gBACIV,OAAA,CAACI,WAAW;MAACF,KAAK,EAAEqB,QAAS;MAACjB,QAAQ,EAAEkB,WAAY;MAACjB,UAAU,EAAEN;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EACjFK,UAAU,CAACX,GAAG,CAAEC,EAAE,iBACfZ,OAAA;MAAAU,QAAA,EAAkBE,EAAE,CAACuB;IAAO,GAAlBvB,EAAE,CAACwB,EAAE;MAAAtB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmB,CAGtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACI,EAAA,CA1BIF,UAAU;AAAAkB,GAAA,GAAVlB,UAAU;AA4BhBA,UAAU,CAACmB,YAAY,GAAG;EACtBhB,UAAU,EAAG;AACjB,CAAC;AAED,eAAeH,UAAU;AAAC,IAAAD,EAAA,EAAAmB,GAAA;AAAAE,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAF,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}